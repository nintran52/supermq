// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	"github.com/absmach/supermq/pkg/policies"
	mock "github.com/stretchr/testify/mock"
)

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// AddPolicies provides a mock function for the type Service
func (_mock *Service) AddPolicies(ctx context.Context, prs []policies.Policy) error {
	ret := _mock.Called(ctx, prs)

	if len(ret) == 0 {
		panic("no return value specified for AddPolicies")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []policies.Policy) error); ok {
		r0 = returnFunc(ctx, prs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_AddPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPolicies'
type Service_AddPolicies_Call struct {
	*mock.Call
}

// AddPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - prs []policies.Policy
func (_e *Service_Expecter) AddPolicies(ctx interface{}, prs interface{}) *Service_AddPolicies_Call {
	return &Service_AddPolicies_Call{Call: _e.mock.On("AddPolicies", ctx, prs)}
}

func (_c *Service_AddPolicies_Call) Run(run func(ctx context.Context, prs []policies.Policy)) *Service_AddPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []policies.Policy
		if args[1] != nil {
			arg1 = args[1].([]policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_AddPolicies_Call) Return(err error) *Service_AddPolicies_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_AddPolicies_Call) RunAndReturn(run func(ctx context.Context, prs []policies.Policy) error) *Service_AddPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// AddPolicy provides a mock function for the type Service
func (_mock *Service) AddPolicy(ctx context.Context, pr policies.Policy) error {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for AddPolicy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) error); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_AddPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPolicy'
type Service_AddPolicy_Call struct {
	*mock.Call
}

// AddPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
func (_e *Service_Expecter) AddPolicy(ctx interface{}, pr interface{}) *Service_AddPolicy_Call {
	return &Service_AddPolicy_Call{Call: _e.mock.On("AddPolicy", ctx, pr)}
}

func (_c *Service_AddPolicy_Call) Run(run func(ctx context.Context, pr policies.Policy)) *Service_AddPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_AddPolicy_Call) Return(err error) *Service_AddPolicy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_AddPolicy_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy) error) *Service_AddPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CountObjects provides a mock function for the type Service
func (_mock *Service) CountObjects(ctx context.Context, pr policies.Policy) (uint64, error) {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for CountObjects")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) (uint64, error)); ok {
		return returnFunc(ctx, pr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) uint64); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, policies.Policy) error); ok {
		r1 = returnFunc(ctx, pr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_CountObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountObjects'
type Service_CountObjects_Call struct {
	*mock.Call
}

// CountObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
func (_e *Service_Expecter) CountObjects(ctx interface{}, pr interface{}) *Service_CountObjects_Call {
	return &Service_CountObjects_Call{Call: _e.mock.On("CountObjects", ctx, pr)}
}

func (_c *Service_CountObjects_Call) Run(run func(ctx context.Context, pr policies.Policy)) *Service_CountObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_CountObjects_Call) Return(v uint64, err error) *Service_CountObjects_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Service_CountObjects_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy) (uint64, error)) *Service_CountObjects_Call {
	_c.Call.Return(run)
	return _c
}

// CountSubjects provides a mock function for the type Service
func (_mock *Service) CountSubjects(ctx context.Context, pr policies.Policy) (uint64, error) {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for CountSubjects")
	}

	var r0 uint64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) (uint64, error)); ok {
		return returnFunc(ctx, pr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) uint64); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Get(0).(uint64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, policies.Policy) error); ok {
		r1 = returnFunc(ctx, pr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_CountSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSubjects'
type Service_CountSubjects_Call struct {
	*mock.Call
}

// CountSubjects is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
func (_e *Service_Expecter) CountSubjects(ctx interface{}, pr interface{}) *Service_CountSubjects_Call {
	return &Service_CountSubjects_Call{Call: _e.mock.On("CountSubjects", ctx, pr)}
}

func (_c *Service_CountSubjects_Call) Run(run func(ctx context.Context, pr policies.Policy)) *Service_CountSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_CountSubjects_Call) Return(v uint64, err error) *Service_CountSubjects_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *Service_CountSubjects_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy) (uint64, error)) *Service_CountSubjects_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicies provides a mock function for the type Service
func (_mock *Service) DeletePolicies(ctx context.Context, prs []policies.Policy) error {
	ret := _mock.Called(ctx, prs)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicies")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []policies.Policy) error); ok {
		r0 = returnFunc(ctx, prs)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_DeletePolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicies'
type Service_DeletePolicies_Call struct {
	*mock.Call
}

// DeletePolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - prs []policies.Policy
func (_e *Service_Expecter) DeletePolicies(ctx interface{}, prs interface{}) *Service_DeletePolicies_Call {
	return &Service_DeletePolicies_Call{Call: _e.mock.On("DeletePolicies", ctx, prs)}
}

func (_c *Service_DeletePolicies_Call) Run(run func(ctx context.Context, prs []policies.Policy)) *Service_DeletePolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []policies.Policy
		if args[1] != nil {
			arg1 = args[1].([]policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_DeletePolicies_Call) Return(err error) *Service_DeletePolicies_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_DeletePolicies_Call) RunAndReturn(run func(ctx context.Context, prs []policies.Policy) error) *Service_DeletePolicies_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyFilter provides a mock function for the type Service
func (_mock *Service) DeletePolicyFilter(ctx context.Context, pr policies.Policy) error {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyFilter")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) error); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Service_DeletePolicyFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyFilter'
type Service_DeletePolicyFilter_Call struct {
	*mock.Call
}

// DeletePolicyFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
func (_e *Service_Expecter) DeletePolicyFilter(ctx interface{}, pr interface{}) *Service_DeletePolicyFilter_Call {
	return &Service_DeletePolicyFilter_Call{Call: _e.mock.On("DeletePolicyFilter", ctx, pr)}
}

func (_c *Service_DeletePolicyFilter_Call) Run(run func(ctx context.Context, pr policies.Policy)) *Service_DeletePolicyFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_DeletePolicyFilter_Call) Return(err error) *Service_DeletePolicyFilter_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Service_DeletePolicyFilter_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy) error) *Service_DeletePolicyFilter_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllObjects provides a mock function for the type Service
func (_mock *Service) ListAllObjects(ctx context.Context, pr policies.Policy) (policies.PolicyPage, error) {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for ListAllObjects")
	}

	var r0 policies.PolicyPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) (policies.PolicyPage, error)); ok {
		return returnFunc(ctx, pr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) policies.PolicyPage); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Get(0).(policies.PolicyPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, policies.Policy) error); ok {
		r1 = returnFunc(ctx, pr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ListAllObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllObjects'
type Service_ListAllObjects_Call struct {
	*mock.Call
}

// ListAllObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
func (_e *Service_Expecter) ListAllObjects(ctx interface{}, pr interface{}) *Service_ListAllObjects_Call {
	return &Service_ListAllObjects_Call{Call: _e.mock.On("ListAllObjects", ctx, pr)}
}

func (_c *Service_ListAllObjects_Call) Run(run func(ctx context.Context, pr policies.Policy)) *Service_ListAllObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_ListAllObjects_Call) Return(policyPage policies.PolicyPage, err error) *Service_ListAllObjects_Call {
	_c.Call.Return(policyPage, err)
	return _c
}

func (_c *Service_ListAllObjects_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy) (policies.PolicyPage, error)) *Service_ListAllObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllSubjects provides a mock function for the type Service
func (_mock *Service) ListAllSubjects(ctx context.Context, pr policies.Policy) (policies.PolicyPage, error) {
	ret := _mock.Called(ctx, pr)

	if len(ret) == 0 {
		panic("no return value specified for ListAllSubjects")
	}

	var r0 policies.PolicyPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) (policies.PolicyPage, error)); ok {
		return returnFunc(ctx, pr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy) policies.PolicyPage); ok {
		r0 = returnFunc(ctx, pr)
	} else {
		r0 = ret.Get(0).(policies.PolicyPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, policies.Policy) error); ok {
		r1 = returnFunc(ctx, pr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ListAllSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllSubjects'
type Service_ListAllSubjects_Call struct {
	*mock.Call
}

// ListAllSubjects is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
func (_e *Service_Expecter) ListAllSubjects(ctx interface{}, pr interface{}) *Service_ListAllSubjects_Call {
	return &Service_ListAllSubjects_Call{Call: _e.mock.On("ListAllSubjects", ctx, pr)}
}

func (_c *Service_ListAllSubjects_Call) Run(run func(ctx context.Context, pr policies.Policy)) *Service_ListAllSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Service_ListAllSubjects_Call) Return(policyPage policies.PolicyPage, err error) *Service_ListAllSubjects_Call {
	_c.Call.Return(policyPage, err)
	return _c
}

func (_c *Service_ListAllSubjects_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy) (policies.PolicyPage, error)) *Service_ListAllSubjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function for the type Service
func (_mock *Service) ListObjects(ctx context.Context, pr policies.Policy, nextPageToken string, limit uint64) (policies.PolicyPage, error) {
	ret := _mock.Called(ctx, pr, nextPageToken, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 policies.PolicyPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy, string, uint64) (policies.PolicyPage, error)); ok {
		return returnFunc(ctx, pr, nextPageToken, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy, string, uint64) policies.PolicyPage); ok {
		r0 = returnFunc(ctx, pr, nextPageToken, limit)
	} else {
		r0 = ret.Get(0).(policies.PolicyPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, policies.Policy, string, uint64) error); ok {
		r1 = returnFunc(ctx, pr, nextPageToken, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type Service_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
//   - nextPageToken string
//   - limit uint64
func (_e *Service_Expecter) ListObjects(ctx interface{}, pr interface{}, nextPageToken interface{}, limit interface{}) *Service_ListObjects_Call {
	return &Service_ListObjects_Call{Call: _e.mock.On("ListObjects", ctx, pr, nextPageToken, limit)}
}

func (_c *Service_ListObjects_Call) Run(run func(ctx context.Context, pr policies.Policy, nextPageToken string, limit uint64)) *Service_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Service_ListObjects_Call) Return(policyPage policies.PolicyPage, err error) *Service_ListObjects_Call {
	_c.Call.Return(policyPage, err)
	return _c
}

func (_c *Service_ListObjects_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy, nextPageToken string, limit uint64) (policies.PolicyPage, error)) *Service_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListPermissions provides a mock function for the type Service
func (_mock *Service) ListPermissions(ctx context.Context, pr policies.Policy, permissionsFilter []string) (policies.Permissions, error) {
	ret := _mock.Called(ctx, pr, permissionsFilter)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissions")
	}

	var r0 policies.Permissions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy, []string) (policies.Permissions, error)); ok {
		return returnFunc(ctx, pr, permissionsFilter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy, []string) policies.Permissions); ok {
		r0 = returnFunc(ctx, pr, permissionsFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(policies.Permissions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, policies.Policy, []string) error); ok {
		r1 = returnFunc(ctx, pr, permissionsFilter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ListPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPermissions'
type Service_ListPermissions_Call struct {
	*mock.Call
}

// ListPermissions is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
//   - permissionsFilter []string
func (_e *Service_Expecter) ListPermissions(ctx interface{}, pr interface{}, permissionsFilter interface{}) *Service_ListPermissions_Call {
	return &Service_ListPermissions_Call{Call: _e.mock.On("ListPermissions", ctx, pr, permissionsFilter)}
}

func (_c *Service_ListPermissions_Call) Run(run func(ctx context.Context, pr policies.Policy, permissionsFilter []string)) *Service_ListPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Service_ListPermissions_Call) Return(permissions policies.Permissions, err error) *Service_ListPermissions_Call {
	_c.Call.Return(permissions, err)
	return _c
}

func (_c *Service_ListPermissions_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy, permissionsFilter []string) (policies.Permissions, error)) *Service_ListPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubjects provides a mock function for the type Service
func (_mock *Service) ListSubjects(ctx context.Context, pr policies.Policy, nextPageToken string, limit uint64) (policies.PolicyPage, error) {
	ret := _mock.Called(ctx, pr, nextPageToken, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListSubjects")
	}

	var r0 policies.PolicyPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy, string, uint64) (policies.PolicyPage, error)); ok {
		return returnFunc(ctx, pr, nextPageToken, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, policies.Policy, string, uint64) policies.PolicyPage); ok {
		r0 = returnFunc(ctx, pr, nextPageToken, limit)
	} else {
		r0 = ret.Get(0).(policies.PolicyPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, policies.Policy, string, uint64) error); ok {
		r1 = returnFunc(ctx, pr, nextPageToken, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Service_ListSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubjects'
type Service_ListSubjects_Call struct {
	*mock.Call
}

// ListSubjects is a helper method to define mock.On call
//   - ctx context.Context
//   - pr policies.Policy
//   - nextPageToken string
//   - limit uint64
func (_e *Service_Expecter) ListSubjects(ctx interface{}, pr interface{}, nextPageToken interface{}, limit interface{}) *Service_ListSubjects_Call {
	return &Service_ListSubjects_Call{Call: _e.mock.On("ListSubjects", ctx, pr, nextPageToken, limit)}
}

func (_c *Service_ListSubjects_Call) Run(run func(ctx context.Context, pr policies.Policy, nextPageToken string, limit uint64)) *Service_ListSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 policies.Policy
		if args[1] != nil {
			arg1 = args[1].(policies.Policy)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 uint64
		if args[3] != nil {
			arg3 = args[3].(uint64)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *Service_ListSubjects_Call) Return(policyPage policies.PolicyPage, err error) *Service_ListSubjects_Call {
	_c.Call.Return(policyPage, err)
	return _c
}

func (_c *Service_ListSubjects_Call) RunAndReturn(run func(ctx context.Context, pr policies.Policy, nextPageToken string, limit uint64) (policies.PolicyPage, error)) *Service_ListSubjects_Call {
	_c.Call.Return(run)
	return _c
}
