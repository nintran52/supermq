// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

type Cache_Expecter struct {
	mock *mock.Mock
}

func (_m *Cache) EXPECT() *Cache_Expecter {
	return &Cache_Expecter{mock: &_m.Mock}
}

// ID provides a mock function for the type Cache
func (_mock *Cache) ID(ctx context.Context, clientSecret string) (string, error) {
	ret := _mock.Called(ctx, clientSecret)

	if len(ret) == 0 {
		panic("no return value specified for ID")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, clientSecret)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, clientSecret)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, clientSecret)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Cache_ID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ID'
type Cache_ID_Call struct {
	*mock.Call
}

// ID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientSecret string
func (_e *Cache_Expecter) ID(ctx interface{}, clientSecret interface{}) *Cache_ID_Call {
	return &Cache_ID_Call{Call: _e.mock.On("ID", ctx, clientSecret)}
}

func (_c *Cache_ID_Call) Run(run func(ctx context.Context, clientSecret string)) *Cache_ID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Cache_ID_Call) Return(s string, err error) *Cache_ID_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Cache_ID_Call) RunAndReturn(run func(ctx context.Context, clientSecret string) (string, error)) *Cache_ID_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type Cache
func (_mock *Cache) Remove(ctx context.Context, clientID string) error {
	ret := _mock.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, clientID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Cache_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Cache_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *Cache_Expecter) Remove(ctx interface{}, clientID interface{}) *Cache_Remove_Call {
	return &Cache_Remove_Call{Call: _e.mock.On("Remove", ctx, clientID)}
}

func (_c *Cache_Remove_Call) Run(run func(ctx context.Context, clientID string)) *Cache_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Cache_Remove_Call) Return(err error) *Cache_Remove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Cache_Remove_Call) RunAndReturn(run func(ctx context.Context, clientID string) error) *Cache_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type Cache
func (_mock *Cache) Save(ctx context.Context, clientSecret string, clientID string) error {
	ret := _mock.Called(ctx, clientSecret, clientID)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, clientSecret, clientID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Cache_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type Cache_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - clientSecret string
//   - clientID string
func (_e *Cache_Expecter) Save(ctx interface{}, clientSecret interface{}, clientID interface{}) *Cache_Save_Call {
	return &Cache_Save_Call{Call: _e.mock.On("Save", ctx, clientSecret, clientID)}
}

func (_c *Cache_Save_Call) Run(run func(ctx context.Context, clientSecret string, clientID string)) *Cache_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *Cache_Save_Call) Return(err error) *Cache_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Cache_Save_Call) RunAndReturn(run func(ctx context.Context, clientSecret string, clientID string) error) *Cache_Save_Call {
	_c.Call.Return(run)
	return _c
}
