// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
// Copyright (c) Abstract Machines

// SPDX-License-Identifier: Apache-2.0

package mocks

import (
	"context"
	"time"

	"github.com/absmach/supermq/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewPATS creates a new instance of PATS. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPATS(t interface {
	mock.TestingT
	Cleanup(func())
}) *PATS {
	mock := &PATS{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PATS is an autogenerated mock type for the PATS type
type PATS struct {
	mock.Mock
}

type PATS_Expecter struct {
	mock *mock.Mock
}

func (_m *PATS) EXPECT() *PATS_Expecter {
	return &PATS_Expecter{mock: &_m.Mock}
}

// AddScope provides a mock function for the type PATS
func (_mock *PATS) AddScope(ctx context.Context, token string, patID string, scopes []auth.Scope) error {
	ret := _mock.Called(ctx, token, patID, scopes)

	if len(ret) == 0 {
		panic("no return value specified for AddScope")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []auth.Scope) error); ok {
		r0 = returnFunc(ctx, token, patID, scopes)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PATS_AddScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddScope'
type PATS_AddScope_Call struct {
	*mock.Call
}

// AddScope is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
//   - scopes []auth.Scope
func (_e *PATS_Expecter) AddScope(ctx interface{}, token interface{}, patID interface{}, scopes interface{}) *PATS_AddScope_Call {
	return &PATS_AddScope_Call{Call: _e.mock.On("AddScope", ctx, token, patID, scopes)}
}

func (_c *PATS_AddScope_Call) Run(run func(ctx context.Context, token string, patID string, scopes []auth.Scope)) *PATS_AddScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []auth.Scope
		if args[3] != nil {
			arg3 = args[3].([]auth.Scope)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PATS_AddScope_Call) Return(err error) *PATS_AddScope_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PATS_AddScope_Call) RunAndReturn(run func(ctx context.Context, token string, patID string, scopes []auth.Scope) error) *PATS_AddScope_Call {
	_c.Call.Return(run)
	return _c
}

// AuthorizePAT provides a mock function for the type PATS
func (_mock *PATS) AuthorizePAT(ctx context.Context, userID string, patID string, entityType auth.EntityType, optionalDomainID string, operation auth.Operation, entityID string) error {
	ret := _mock.Called(ctx, userID, patID, entityType, optionalDomainID, operation, entityID)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizePAT")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, auth.EntityType, string, auth.Operation, string) error); ok {
		r0 = returnFunc(ctx, userID, patID, entityType, optionalDomainID, operation, entityID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PATS_AuthorizePAT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizePAT'
type PATS_AuthorizePAT_Call struct {
	*mock.Call
}

// AuthorizePAT is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - patID string
//   - entityType auth.EntityType
//   - optionalDomainID string
//   - operation auth.Operation
//   - entityID string
func (_e *PATS_Expecter) AuthorizePAT(ctx interface{}, userID interface{}, patID interface{}, entityType interface{}, optionalDomainID interface{}, operation interface{}, entityID interface{}) *PATS_AuthorizePAT_Call {
	return &PATS_AuthorizePAT_Call{Call: _e.mock.On("AuthorizePAT", ctx, userID, patID, entityType, optionalDomainID, operation, entityID)}
}

func (_c *PATS_AuthorizePAT_Call) Run(run func(ctx context.Context, userID string, patID string, entityType auth.EntityType, optionalDomainID string, operation auth.Operation, entityID string)) *PATS_AuthorizePAT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 auth.EntityType
		if args[3] != nil {
			arg3 = args[3].(auth.EntityType)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 auth.Operation
		if args[5] != nil {
			arg5 = args[5].(auth.Operation)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *PATS_AuthorizePAT_Call) Return(err error) *PATS_AuthorizePAT_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PATS_AuthorizePAT_Call) RunAndReturn(run func(ctx context.Context, userID string, patID string, entityType auth.EntityType, optionalDomainID string, operation auth.Operation, entityID string) error) *PATS_AuthorizePAT_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePAT provides a mock function for the type PATS
func (_mock *PATS) CreatePAT(ctx context.Context, token string, name string, description string, duration time.Duration) (auth.PAT, error) {
	ret := _mock.Called(ctx, token, name, description, duration)

	if len(ret) == 0 {
		panic("no return value specified for CreatePAT")
	}

	var r0 auth.PAT
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration) (auth.PAT, error)); ok {
		return returnFunc(ctx, token, name, description, duration)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration) auth.PAT); ok {
		r0 = returnFunc(ctx, token, name, description, duration)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, token, name, description, duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_CreatePAT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePAT'
type PATS_CreatePAT_Call struct {
	*mock.Call
}

// CreatePAT is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - name string
//   - description string
//   - duration time.Duration
func (_e *PATS_Expecter) CreatePAT(ctx interface{}, token interface{}, name interface{}, description interface{}, duration interface{}) *PATS_CreatePAT_Call {
	return &PATS_CreatePAT_Call{Call: _e.mock.On("CreatePAT", ctx, token, name, description, duration)}
}

func (_c *PATS_CreatePAT_Call) Run(run func(ctx context.Context, token string, name string, description string, duration time.Duration)) *PATS_CreatePAT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 time.Duration
		if args[4] != nil {
			arg4 = args[4].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *PATS_CreatePAT_Call) Return(pAT auth.PAT, err error) *PATS_CreatePAT_Call {
	_c.Call.Return(pAT, err)
	return _c
}

func (_c *PATS_CreatePAT_Call) RunAndReturn(run func(ctx context.Context, token string, name string, description string, duration time.Duration) (auth.PAT, error)) *PATS_CreatePAT_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePAT provides a mock function for the type PATS
func (_mock *PATS) DeletePAT(ctx context.Context, token string, patID string) error {
	ret := _mock.Called(ctx, token, patID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePAT")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, token, patID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PATS_DeletePAT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePAT'
type PATS_DeletePAT_Call struct {
	*mock.Call
}

// DeletePAT is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
func (_e *PATS_Expecter) DeletePAT(ctx interface{}, token interface{}, patID interface{}) *PATS_DeletePAT_Call {
	return &PATS_DeletePAT_Call{Call: _e.mock.On("DeletePAT", ctx, token, patID)}
}

func (_c *PATS_DeletePAT_Call) Run(run func(ctx context.Context, token string, patID string)) *PATS_DeletePAT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PATS_DeletePAT_Call) Return(err error) *PATS_DeletePAT_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PATS_DeletePAT_Call) RunAndReturn(run func(ctx context.Context, token string, patID string) error) *PATS_DeletePAT_Call {
	_c.Call.Return(run)
	return _c
}

// IdentifyPAT provides a mock function for the type PATS
func (_mock *PATS) IdentifyPAT(ctx context.Context, paToken string) (auth.PAT, error) {
	ret := _mock.Called(ctx, paToken)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyPAT")
	}

	var r0 auth.PAT
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (auth.PAT, error)); ok {
		return returnFunc(ctx, paToken)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) auth.PAT); ok {
		r0 = returnFunc(ctx, paToken)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, paToken)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_IdentifyPAT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentifyPAT'
type PATS_IdentifyPAT_Call struct {
	*mock.Call
}

// IdentifyPAT is a helper method to define mock.On call
//   - ctx context.Context
//   - paToken string
func (_e *PATS_Expecter) IdentifyPAT(ctx interface{}, paToken interface{}) *PATS_IdentifyPAT_Call {
	return &PATS_IdentifyPAT_Call{Call: _e.mock.On("IdentifyPAT", ctx, paToken)}
}

func (_c *PATS_IdentifyPAT_Call) Run(run func(ctx context.Context, paToken string)) *PATS_IdentifyPAT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PATS_IdentifyPAT_Call) Return(pAT auth.PAT, err error) *PATS_IdentifyPAT_Call {
	_c.Call.Return(pAT, err)
	return _c
}

func (_c *PATS_IdentifyPAT_Call) RunAndReturn(run func(ctx context.Context, paToken string) (auth.PAT, error)) *PATS_IdentifyPAT_Call {
	_c.Call.Return(run)
	return _c
}

// ListPATS provides a mock function for the type PATS
func (_mock *PATS) ListPATS(ctx context.Context, token string, pm auth.PATSPageMeta) (auth.PATSPage, error) {
	ret := _mock.Called(ctx, token, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListPATS")
	}

	var r0 auth.PATSPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, auth.PATSPageMeta) (auth.PATSPage, error)); ok {
		return returnFunc(ctx, token, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, auth.PATSPageMeta) auth.PATSPage); ok {
		r0 = returnFunc(ctx, token, pm)
	} else {
		r0 = ret.Get(0).(auth.PATSPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, auth.PATSPageMeta) error); ok {
		r1 = returnFunc(ctx, token, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_ListPATS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPATS'
type PATS_ListPATS_Call struct {
	*mock.Call
}

// ListPATS is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - pm auth.PATSPageMeta
func (_e *PATS_Expecter) ListPATS(ctx interface{}, token interface{}, pm interface{}) *PATS_ListPATS_Call {
	return &PATS_ListPATS_Call{Call: _e.mock.On("ListPATS", ctx, token, pm)}
}

func (_c *PATS_ListPATS_Call) Run(run func(ctx context.Context, token string, pm auth.PATSPageMeta)) *PATS_ListPATS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 auth.PATSPageMeta
		if args[2] != nil {
			arg2 = args[2].(auth.PATSPageMeta)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PATS_ListPATS_Call) Return(pATSPage auth.PATSPage, err error) *PATS_ListPATS_Call {
	_c.Call.Return(pATSPage, err)
	return _c
}

func (_c *PATS_ListPATS_Call) RunAndReturn(run func(ctx context.Context, token string, pm auth.PATSPageMeta) (auth.PATSPage, error)) *PATS_ListPATS_Call {
	_c.Call.Return(run)
	return _c
}

// ListScopes provides a mock function for the type PATS
func (_mock *PATS) ListScopes(ctx context.Context, token string, pm auth.ScopesPageMeta) (auth.ScopesPage, error) {
	ret := _mock.Called(ctx, token, pm)

	if len(ret) == 0 {
		panic("no return value specified for ListScopes")
	}

	var r0 auth.ScopesPage
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, auth.ScopesPageMeta) (auth.ScopesPage, error)); ok {
		return returnFunc(ctx, token, pm)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, auth.ScopesPageMeta) auth.ScopesPage); ok {
		r0 = returnFunc(ctx, token, pm)
	} else {
		r0 = ret.Get(0).(auth.ScopesPage)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, auth.ScopesPageMeta) error); ok {
		r1 = returnFunc(ctx, token, pm)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_ListScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListScopes'
type PATS_ListScopes_Call struct {
	*mock.Call
}

// ListScopes is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - pm auth.ScopesPageMeta
func (_e *PATS_Expecter) ListScopes(ctx interface{}, token interface{}, pm interface{}) *PATS_ListScopes_Call {
	return &PATS_ListScopes_Call{Call: _e.mock.On("ListScopes", ctx, token, pm)}
}

func (_c *PATS_ListScopes_Call) Run(run func(ctx context.Context, token string, pm auth.ScopesPageMeta)) *PATS_ListScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 auth.ScopesPageMeta
		if args[2] != nil {
			arg2 = args[2].(auth.ScopesPageMeta)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PATS_ListScopes_Call) Return(scopesPage auth.ScopesPage, err error) *PATS_ListScopes_Call {
	_c.Call.Return(scopesPage, err)
	return _c
}

func (_c *PATS_ListScopes_Call) RunAndReturn(run func(ctx context.Context, token string, pm auth.ScopesPageMeta) (auth.ScopesPage, error)) *PATS_ListScopes_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAllPAT provides a mock function for the type PATS
func (_mock *PATS) RemoveAllPAT(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllPAT")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PATS_RemoveAllPAT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAllPAT'
type PATS_RemoveAllPAT_Call struct {
	*mock.Call
}

// RemoveAllPAT is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *PATS_Expecter) RemoveAllPAT(ctx interface{}, token interface{}) *PATS_RemoveAllPAT_Call {
	return &PATS_RemoveAllPAT_Call{Call: _e.mock.On("RemoveAllPAT", ctx, token)}
}

func (_c *PATS_RemoveAllPAT_Call) Run(run func(ctx context.Context, token string)) *PATS_RemoveAllPAT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PATS_RemoveAllPAT_Call) Return(err error) *PATS_RemoveAllPAT_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PATS_RemoveAllPAT_Call) RunAndReturn(run func(ctx context.Context, token string) error) *PATS_RemoveAllPAT_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePATAllScope provides a mock function for the type PATS
func (_mock *PATS) RemovePATAllScope(ctx context.Context, token string, patID string) error {
	ret := _mock.Called(ctx, token, patID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePATAllScope")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, token, patID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PATS_RemovePATAllScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePATAllScope'
type PATS_RemovePATAllScope_Call struct {
	*mock.Call
}

// RemovePATAllScope is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
func (_e *PATS_Expecter) RemovePATAllScope(ctx interface{}, token interface{}, patID interface{}) *PATS_RemovePATAllScope_Call {
	return &PATS_RemovePATAllScope_Call{Call: _e.mock.On("RemovePATAllScope", ctx, token, patID)}
}

func (_c *PATS_RemovePATAllScope_Call) Run(run func(ctx context.Context, token string, patID string)) *PATS_RemovePATAllScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PATS_RemovePATAllScope_Call) Return(err error) *PATS_RemovePATAllScope_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PATS_RemovePATAllScope_Call) RunAndReturn(run func(ctx context.Context, token string, patID string) error) *PATS_RemovePATAllScope_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveScope provides a mock function for the type PATS
func (_mock *PATS) RemoveScope(ctx context.Context, token string, patID string, scopeIDs ...string) error {
	var tmpRet mock.Arguments
	if len(scopeIDs) > 0 {
		tmpRet = _mock.Called(ctx, token, patID, scopeIDs)
	} else {
		tmpRet = _mock.Called(ctx, token, patID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for RemoveScope")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = returnFunc(ctx, token, patID, scopeIDs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PATS_RemoveScope_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveScope'
type PATS_RemoveScope_Call struct {
	*mock.Call
}

// RemoveScope is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
//   - scopeIDs ...string
func (_e *PATS_Expecter) RemoveScope(ctx interface{}, token interface{}, patID interface{}, scopeIDs ...interface{}) *PATS_RemoveScope_Call {
	return &PATS_RemoveScope_Call{Call: _e.mock.On("RemoveScope",
		append([]interface{}{ctx, token, patID}, scopeIDs...)...)}
}

func (_c *PATS_RemoveScope_Call) Run(run func(ctx context.Context, token string, patID string, scopeIDs ...string)) *PATS_RemoveScope_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []string
		var variadicArgs []string
		if len(args) > 3 {
			variadicArgs = args[3].([]string)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *PATS_RemoveScope_Call) Return(err error) *PATS_RemoveScope_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PATS_RemoveScope_Call) RunAndReturn(run func(ctx context.Context, token string, patID string, scopeIDs ...string) error) *PATS_RemoveScope_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPATSecret provides a mock function for the type PATS
func (_mock *PATS) ResetPATSecret(ctx context.Context, token string, patID string, duration time.Duration) (auth.PAT, error) {
	ret := _mock.Called(ctx, token, patID, duration)

	if len(ret) == 0 {
		panic("no return value specified for ResetPATSecret")
	}

	var r0 auth.PAT
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) (auth.PAT, error)); ok {
		return returnFunc(ctx, token, patID, duration)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) auth.PAT); ok {
		r0 = returnFunc(ctx, token, patID, duration)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, token, patID, duration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_ResetPATSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPATSecret'
type PATS_ResetPATSecret_Call struct {
	*mock.Call
}

// ResetPATSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
//   - duration time.Duration
func (_e *PATS_Expecter) ResetPATSecret(ctx interface{}, token interface{}, patID interface{}, duration interface{}) *PATS_ResetPATSecret_Call {
	return &PATS_ResetPATSecret_Call{Call: _e.mock.On("ResetPATSecret", ctx, token, patID, duration)}
}

func (_c *PATS_ResetPATSecret_Call) Run(run func(ctx context.Context, token string, patID string, duration time.Duration)) *PATS_ResetPATSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PATS_ResetPATSecret_Call) Return(pAT auth.PAT, err error) *PATS_ResetPATSecret_Call {
	_c.Call.Return(pAT, err)
	return _c
}

func (_c *PATS_ResetPATSecret_Call) RunAndReturn(run func(ctx context.Context, token string, patID string, duration time.Duration) (auth.PAT, error)) *PATS_ResetPATSecret_Call {
	_c.Call.Return(run)
	return _c
}

// RetrievePAT provides a mock function for the type PATS
func (_mock *PATS) RetrievePAT(ctx context.Context, userID string, patID string) (auth.PAT, error) {
	ret := _mock.Called(ctx, userID, patID)

	if len(ret) == 0 {
		panic("no return value specified for RetrievePAT")
	}

	var r0 auth.PAT
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (auth.PAT, error)); ok {
		return returnFunc(ctx, userID, patID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) auth.PAT); ok {
		r0 = returnFunc(ctx, userID, patID)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, userID, patID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_RetrievePAT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrievePAT'
type PATS_RetrievePAT_Call struct {
	*mock.Call
}

// RetrievePAT is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - patID string
func (_e *PATS_Expecter) RetrievePAT(ctx interface{}, userID interface{}, patID interface{}) *PATS_RetrievePAT_Call {
	return &PATS_RetrievePAT_Call{Call: _e.mock.On("RetrievePAT", ctx, userID, patID)}
}

func (_c *PATS_RetrievePAT_Call) Run(run func(ctx context.Context, userID string, patID string)) *PATS_RetrievePAT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PATS_RetrievePAT_Call) Return(pAT auth.PAT, err error) *PATS_RetrievePAT_Call {
	_c.Call.Return(pAT, err)
	return _c
}

func (_c *PATS_RetrievePAT_Call) RunAndReturn(run func(ctx context.Context, userID string, patID string) (auth.PAT, error)) *PATS_RetrievePAT_Call {
	_c.Call.Return(run)
	return _c
}

// RevokePATSecret provides a mock function for the type PATS
func (_mock *PATS) RevokePATSecret(ctx context.Context, token string, patID string) error {
	ret := _mock.Called(ctx, token, patID)

	if len(ret) == 0 {
		panic("no return value specified for RevokePATSecret")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, token, patID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PATS_RevokePATSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokePATSecret'
type PATS_RevokePATSecret_Call struct {
	*mock.Call
}

// RevokePATSecret is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
func (_e *PATS_Expecter) RevokePATSecret(ctx interface{}, token interface{}, patID interface{}) *PATS_RevokePATSecret_Call {
	return &PATS_RevokePATSecret_Call{Call: _e.mock.On("RevokePATSecret", ctx, token, patID)}
}

func (_c *PATS_RevokePATSecret_Call) Run(run func(ctx context.Context, token string, patID string)) *PATS_RevokePATSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PATS_RevokePATSecret_Call) Return(err error) *PATS_RevokePATSecret_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PATS_RevokePATSecret_Call) RunAndReturn(run func(ctx context.Context, token string, patID string) error) *PATS_RevokePATSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePATDescription provides a mock function for the type PATS
func (_mock *PATS) UpdatePATDescription(ctx context.Context, token string, patID string, description string) (auth.PAT, error) {
	ret := _mock.Called(ctx, token, patID, description)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePATDescription")
	}

	var r0 auth.PAT
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (auth.PAT, error)); ok {
		return returnFunc(ctx, token, patID, description)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) auth.PAT); ok {
		r0 = returnFunc(ctx, token, patID, description)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, token, patID, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_UpdatePATDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePATDescription'
type PATS_UpdatePATDescription_Call struct {
	*mock.Call
}

// UpdatePATDescription is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
//   - description string
func (_e *PATS_Expecter) UpdatePATDescription(ctx interface{}, token interface{}, patID interface{}, description interface{}) *PATS_UpdatePATDescription_Call {
	return &PATS_UpdatePATDescription_Call{Call: _e.mock.On("UpdatePATDescription", ctx, token, patID, description)}
}

func (_c *PATS_UpdatePATDescription_Call) Run(run func(ctx context.Context, token string, patID string, description string)) *PATS_UpdatePATDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PATS_UpdatePATDescription_Call) Return(pAT auth.PAT, err error) *PATS_UpdatePATDescription_Call {
	_c.Call.Return(pAT, err)
	return _c
}

func (_c *PATS_UpdatePATDescription_Call) RunAndReturn(run func(ctx context.Context, token string, patID string, description string) (auth.PAT, error)) *PATS_UpdatePATDescription_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePATName provides a mock function for the type PATS
func (_mock *PATS) UpdatePATName(ctx context.Context, token string, patID string, name string) (auth.PAT, error) {
	ret := _mock.Called(ctx, token, patID, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePATName")
	}

	var r0 auth.PAT
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (auth.PAT, error)); ok {
		return returnFunc(ctx, token, patID, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) auth.PAT); ok {
		r0 = returnFunc(ctx, token, patID, name)
	} else {
		r0 = ret.Get(0).(auth.PAT)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, token, patID, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PATS_UpdatePATName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePATName'
type PATS_UpdatePATName_Call struct {
	*mock.Call
}

// UpdatePATName is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - patID string
//   - name string
func (_e *PATS_Expecter) UpdatePATName(ctx interface{}, token interface{}, patID interface{}, name interface{}) *PATS_UpdatePATName_Call {
	return &PATS_UpdatePATName_Call{Call: _e.mock.On("UpdatePATName", ctx, token, patID, name)}
}

func (_c *PATS_UpdatePATName_Call) Run(run func(ctx context.Context, token string, patID string, name string)) *PATS_UpdatePATName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PATS_UpdatePATName_Call) Return(pAT auth.PAT, err error) *PATS_UpdatePATName_Call {
	_c.Call.Return(pAT, err)
	return _c
}

func (_c *PATS_UpdatePATName_Call) RunAndReturn(run func(ctx context.Context, token string, patID string, name string) (auth.PAT, error)) *PATS_UpdatePATName_Call {
	_c.Call.Return(run)
	return _c
}
